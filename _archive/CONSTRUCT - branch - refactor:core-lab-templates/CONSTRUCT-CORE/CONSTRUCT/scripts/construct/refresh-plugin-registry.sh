#!/bin/bash

# Refresh Plugin Registry
# Scans plugin directories and generates registry.yaml

set -e

# Colors
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONSTRUCT_CORE="$(cd "$SCRIPT_DIR/../../.." && pwd)"
CONSTRUCT_ROOT="$(cd "$CONSTRUCT_CORE/.." && pwd)"

# Check for required dependencies
if ! command -v yq &> /dev/null; then
    echo -e "${RED}❌ Error: yq is required but not installed${NC}"
    echo "Please install yq: brew install yq"
    echo "See requirements.md for more information"
    exit 1
fi

# Show help if requested
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Usage: $0"
    echo ""
    echo "Refresh the CONSTRUCT plugin registry"
    echo ""
    echo "This script scans all plugin directories and generates registry.yaml"
    echo "with metadata about available plugins including:"
    echo "  - Plugin descriptions"
    echo "  - Version information"
    echo "  - Available validators and generators"
    echo ""
    echo "The registry is used by create-project.sh and assemble-claude.sh"
    exit 0
fi

echo -e "${BLUE}🔄 Refreshing plugin registry...${NC}"

# Output file
REGISTRY_FILE="$CONSTRUCT_CORE/patterns/plugins/registry.yaml"

# Start registry file
cat > "$REGISTRY_FILE" << EOF
# CONSTRUCT Plugin Registry
# Auto-generated by refresh-plugin-registry.sh
# Last updated: $(date)

plugins:
  core:
    # Plugins shipped with CONSTRUCT-CORE
EOF

# Function to process a plugin directory
process_plugin() {
    local plugin_dir="$1"
    local location="$2"  # core or lab
    local category="$3"
    local plugin_name="$4"
    local plugin_path="$category/$plugin_name"
    
    # Check for metadata file
    if [ -f "$plugin_dir/$plugin_name.yaml" ]; then
        # Extract metadata
        local description=""
        local version=""
        
        # Read description
        if grep -q "^description:" "$plugin_dir/$plugin_name.yaml"; then
            description=$(grep "^description:" "$plugin_dir/$plugin_name.yaml" | head -1 | sed 's/description: *//' | sed 's/"//g')
        fi
        
        # Read version
        if grep -q "^version:" "$plugin_dir/$plugin_name.yaml"; then
            version=$(grep "^version:" "$plugin_dir/$plugin_name.yaml" | head -1 | sed 's/version: *//' | sed 's/"//g')
        fi
        
        # Check what components exist
        local has_validators=false
        local has_generators=false
        [ -d "$plugin_dir/validators" ] && has_validators=true
        [ -d "$plugin_dir/generators" ] && has_generators=true
        
        # Write to appropriate section
        if [ "$location" = "core" ]; then
            cat >> "$REGISTRY_FILE" << EOF
    $plugin_path:
      description: "$description"
      version: "$version"
      has_validators: $has_validators
      has_generators: $has_generators
EOF
        else
            # For LAB, we'll append to a temp file first
            echo "    $plugin_path:" >> "$LAB_TEMP"
            echo "      description: \"$description\"" >> "$LAB_TEMP"
            echo "      version: \"$version\"" >> "$LAB_TEMP"
            echo "      has_validators: $has_validators" >> "$LAB_TEMP"
            echo "      has_generators: $has_generators" >> "$LAB_TEMP"
        fi
        
        return 0
    else
        echo -e "${YELLOW}  ⚠️  Missing metadata for $plugin_path${NC}"
        return 1
    fi
}

# Scan CORE plugins
echo -e "${YELLOW}Scanning CORE plugins...${NC}"
core_count=0
for category_dir in "$CONSTRUCT_CORE/patterns/plugins"/*; do
    [ -d "$category_dir" ] || continue
    category=$(basename "$category_dir")
    
    # Skip non-category directories
    [[ "$category" == "templates" || "$category" == "lib" || "$category" == "registry.yaml" ]] && continue
    
    for plugin_dir in "$category_dir"/*; do
        [ -d "$plugin_dir" ] || continue
        plugin_name=$(basename "$plugin_dir")
        
        if process_plugin "$plugin_dir" "core" "$category" "$plugin_name"; then
            ((core_count++))
        fi
    done
done

# Prepare LAB section
LAB_TEMP=$(mktemp)
echo "" >> "$REGISTRY_FILE"
echo "  lab:" >> "$REGISTRY_FILE"
echo "    # Project-specific plugins in CONSTRUCT-LAB" >> "$REGISTRY_FILE"

# Scan LAB plugins
lab_count=0
if [ -d "$CONSTRUCT_ROOT/CONSTRUCT-LAB/patterns/plugins" ]; then
    echo -e "${YELLOW}Scanning LAB plugins...${NC}"
    
    for category_dir in "$CONSTRUCT_ROOT/CONSTRUCT-LAB/patterns/plugins"/*; do
        [ -d "$category_dir" ] || continue
        category=$(basename "$category_dir")
        
        for plugin_dir in "$category_dir"/*; do
            [ -d "$plugin_dir" ] || continue
            plugin_name=$(basename "$plugin_dir")
            
            if process_plugin "$plugin_dir" "lab" "$category" "$plugin_name"; then
                ((lab_count++))
            fi
        done
    done
fi

# Append LAB plugins if any found
if [ $lab_count -gt 0 ] && [ -f "$LAB_TEMP" ]; then
    cat "$LAB_TEMP" >> "$REGISTRY_FILE"
else
    echo "    # No LAB plugins found" >> "$REGISTRY_FILE"
fi

# Clean up temp file
rm -f "$LAB_TEMP"

echo -e "${GREEN}✅ Plugin registry updated: $REGISTRY_FILE${NC}"

# Show summary
echo ""
echo "Found plugins:"
echo "  CORE: $core_count"
echo "  LAB: $lab_count"
echo ""

# Show what was found
if [ $core_count -gt 0 ]; then
    echo "CORE plugins:"
    grep -A1 "^    [a-zA-Z].*:$" "$REGISTRY_FILE" | grep "description:" | sed 's/.*description: "/  - /' | sed 's/"$//' | head -$core_count
fi

if [ $lab_count -gt 0 ]; then
    echo ""
    echo "LAB plugins:"
    tail -n +$(($(grep -n "^  lab:" "$REGISTRY_FILE" | cut -d: -f1) + 2)) "$REGISTRY_FILE" | grep -A1 "^    [a-zA-Z].*:$" | grep "description:" | sed 's/.*description: "/  - /' | sed 's/"$//'
fi