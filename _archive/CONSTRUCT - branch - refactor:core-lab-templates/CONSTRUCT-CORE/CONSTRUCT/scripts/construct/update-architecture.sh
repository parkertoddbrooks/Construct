#!/bin/bash

# Project Architecture Documentation Update Script
# Updates and maintains project architecture documentation based on active patterns

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Source library functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONSTRUCT_CORE="$(cd "$SCRIPT_DIR/../../.." && pwd)"
source "$CONSTRUCT_CORE/CONSTRUCT/lib/common-patterns.sh"

# Show help if requested
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Usage: $0 [PROJECT_DIR]"
    echo ""
    echo "Update project architecture documentation"
    echo ""
    echo "This script generates architecture documentation based on active patterns."
    echo "It reads patterns from PROJECT_DIR/.construct/patterns.yaml and runs"
    echo "pattern-specific architecture generators."
    echo ""
    echo "Arguments:"
    echo "  PROJECT_DIR   Project directory to document (default: current directory)"
    echo ""
    echo "Pattern generators should be located at:"
    echo "  patterns/[pattern-name]/generate-architecture.sh"
    echo ""
    echo "Examples:"
    echo "  $0                    # Document current directory"
    echo "  $0 .                  # Document current directory"
    echo "  $0 Projects/MyApp/ios # Document iOS project"
    exit 0
fi

# Accept PROJECT_DIR as parameter, default to current directory
PROJECT_DIR="${1:-.}"
PROJECT_DIR="$(cd "$PROJECT_DIR" && pwd)"

# Get patterns file
PATTERNS_FILE="$PROJECT_DIR/.construct/patterns.yaml"

echo -e "${BLUE}üìö Updating Project Architecture Documentation...${NC}"
echo "Project: $PROJECT_DIR"
echo ""

# Determine where to write AI artifacts (fixes GitHub issue #1)
if [ -d "$PROJECT_DIR/CONSTRUCT-CORE" ] && [ -d "$PROJECT_DIR/CONSTRUCT-LAB" ]; then
    # This is CONSTRUCT itself - use CONSTRUCT-LAB/AI/
    AI_DIR="$PROJECT_DIR/CONSTRUCT-LAB/AI"
else
    # Regular project - use PROJECT_DIR/AI/
    AI_DIR="$PROJECT_DIR/AI"
fi

# Create docs directory if it doesn't exist
DOCS_DIR="$AI_DIR/docs/automated"
mkdir -p "$DOCS_DIR"
mkdir -p "$DOCS_DIR/_old"

# Function to get active patterns
get_active_patterns() {
    local patterns_file="$1"
    
    if [ ! -f "$patterns_file" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è No .construct/patterns.yaml found${NC}" >&2
        echo -e "${YELLOW}Using default documentation generation${NC}" >&2
        return 1
    fi
    
    # Check for yq
    if ! command -v yq >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Error: yq is required to read patterns.yaml${NC}" >&2
        echo -e "${YELLOW}Install yq: https://github.com/mikefarah/yq${NC}" >&2
        return 1
    fi
    
    # Extract active plugins
    yq eval '.plugins[]' "$patterns_file" 2>/dev/null || echo ""
}

# Generate base architecture overview
generate_base_architecture() {
    local output_file="$DOCS_DIR/architecture-overview-automated.md"
    
    echo -e "${YELLOW}Generating base architecture overview...${NC}"
    
    # Get repository info
    eval $(get_repo_info "$PROJECT_DIR")
    
    # Start with basic header
    cat > "$output_file" << EOF
# Project Architecture

**Last Updated**: $(date)
**Generated by**: update-architecture.sh
**Repo**: $REPO_NAME
**Remote**: $REMOTE_URL
**Branch**: $(cd "$PROJECT_DIR" && git branch --show-current 2>/dev/null || echo "unknown")
**Project**: $PROJECT_DIR

## Overview

This document provides an architectural overview of the project based on active patterns.

### Active Patterns
EOF

    # List active patterns
    if [ -f "$PATTERNS_FILE" ]; then
        local patterns=$(get_active_patterns "$PATTERNS_FILE")
        if [ -n "$patterns" ]; then
            echo "" >> "$output_file"
            echo "$patterns" | while read -r pattern; do
                echo "- $pattern" >> "$output_file"
            done
        else
            echo "- No patterns configured" >> "$output_file"
        fi
    else
        echo "- No patterns.yaml found" >> "$output_file"
    fi
    
    echo "" >> "$output_file"
    echo "---" >> "$output_file"
    echo "" >> "$output_file"
}

# Run pattern-specific architecture generators
run_pattern_generators() {
    local output_file="$DOCS_DIR/architecture-overview-automated.md"
    local patterns_run=0
    
    if [ ! -f "$PATTERNS_FILE" ]; then
        echo -e "${YELLOW}No patterns.yaml found, using generic documentation${NC}"
        return 0
    fi
    
    local patterns=$(get_active_patterns "$PATTERNS_FILE")
    if [ -z "$patterns" ]; then
        echo -e "${YELLOW}No active patterns found${NC}"
        return 0
    fi
    
    echo -e "${BLUE}Running pattern-specific generators...${NC}"
    
    while IFS= read -r pattern; do
        [ -z "$pattern" ] && continue
        
        # Look for pattern-specific architecture generator
        # Try new generators directory first
        local generators_path="$CONSTRUCT_CORE/patterns/plugins/$pattern/generators/architecture.sh"
        # Then check validators directory (temporary backward compatibility)
        local validators_path="$CONSTRUCT_CORE/patterns/plugins/$pattern/validators/generate-architecture.sh"
        # Finally check old location
        local old_generator="$SCRIPTS_ROOT/patterns/$pattern/generate-architecture.sh"
        
        local generator=""
        if [ -f "$generators_path" ]; then
            generator="$generators_path"
        elif [ -f "$validators_path" ]; then
            generator="$validators_path"
            echo -e "${YELLOW}  ‚ö†Ô∏è  Generator in validators/ directory for $pattern (should be in generators/)${NC}"
        elif [ -f "$old_generator" ]; then
            generator="$old_generator"
            echo -e "${YELLOW}  ‚ö†Ô∏è  Using legacy generator location for $pattern${NC}"
        fi
        
        if [ -n "$generator" ]; then
            echo -e "${GREEN}‚Üí Running $pattern architecture generator${NC}"
            
            # Create temp file for pattern output
            local temp_file=$(mktemp)
            
            # Run the generator and capture output
            if bash "$generator" "$PROJECT_DIR" > "$temp_file" 2>&1; then
                # Append to main documentation
                echo "" >> "$output_file"
                echo "## $pattern Architecture" >> "$output_file"
                echo "" >> "$output_file"
                cat "$temp_file" >> "$output_file"
                ((patterns_run++))
            else
                echo -e "${YELLOW}‚ö†Ô∏è $pattern generator failed${NC}"
            fi
            
            rm -f "$temp_file"
        else
            echo -e "${YELLOW}‚Üí No architecture generator for pattern: $pattern${NC}"
        fi
    done <<< "$patterns"
}

# Generate pattern-specific documentation list
generate_pattern_documentation_list() {
    local output_file="$DOCS_DIR/architecture-overview-automated.md"
    
    # Check what pattern-specific docs exist
    local has_docs=false
    
    if [ -d "$AI_DIR/docs/patterns" ]; then
        local pattern_docs=$(find "$AI_DIR/docs/patterns" -name "*.md" -type f 2>/dev/null)
        if [ -n "$pattern_docs" ]; then
            echo "" >> "$output_file"
            echo "## Additional Documentation" >> "$output_file"
            echo "" >> "$output_file"
            echo "Pattern-specific documentation:" >> "$output_file"
            echo "$pattern_docs" | while read -r doc; do
                local doc_name=$(basename "$doc" .md)
                local relative_path=$(echo "$doc" | sed "s|$PROJECT_DIR/||")
                echo "- [$doc_name]($relative_path)" >> "$output_file"
            done
            has_docs=true
        fi
    fi
    
    if [ "$has_docs" = false ]; then
        echo "" >> "$output_file"
        echo "## Documentation" >> "$output_file"
        echo "" >> "$output_file"
        echo "No pattern-specific documentation found." >> "$output_file"
        echo "Pattern generators can create documentation in AI/docs/patterns/" >> "$output_file"
    fi
}

# Main execution
main() {
    echo "Updating project architecture documentation..."
    echo ""
    
    # Generate base architecture overview
    generate_base_architecture
    
    # Run pattern-specific generators
    run_pattern_generators
    
    # Pattern generators already ran, skip generic content
    
    # Add documentation list
    generate_pattern_documentation_list
    
    # Run construct-dev generators if active
    run_construct_dev_generators
    
    # Add footer
    echo "" >> "$DOCS_DIR/architecture-overview-automated.md"
    echo "---" >> "$DOCS_DIR/architecture-overview-automated.md"
    echo "" >> "$DOCS_DIR/architecture-overview-automated.md"
    echo "*This document is auto-generated. To update, run: update-architecture.sh*" >> "$DOCS_DIR/architecture-overview-automated.md"
    
    echo ""
    echo -e "${BLUE}üìö Architecture Documentation Update Complete!${NC}"
    echo ""
    echo "Generated documentation:"
    echo "  - $DOCS_DIR/architecture-overview-automated.md"
    
    # List additional construct-dev docs if generated
    if [ -f "$DOCS_DIR/script-reference-automated.md" ]; then
        echo "  - $DOCS_DIR/script-reference-automated.md"
    fi
    if [ -f "$DOCS_DIR/development-patterns-automated.md" ]; then
        echo "  - $DOCS_DIR/development-patterns-automated.md"
    fi
    if [ -f "$DOCS_DIR/api-reference-automated.md" ]; then
        echo "  - $DOCS_DIR/api-reference-automated.md"
    fi
    if [ -f "$DOCS_DIR/improving-CONSTRUCT-guide-automated.md" ]; then
        echo "  - $DOCS_DIR/improving-CONSTRUCT-guide-automated.md"
    fi
    
    echo ""
    echo "Next steps:"
    echo "  update-context $PROJECT_DIR      # Update project context"
    echo "  check-quality $PROJECT_DIR       # Validate documentation quality"
}

# Run construct-dev specific generators if active
run_construct_dev_generators() {
    local patterns=$(get_active_patterns "$PATTERNS_FILE")
    
    # Check if construct-dev pattern is active
    if echo "$patterns" | grep -q "tooling/construct-dev"; then
        echo -e "${BLUE}Running CONSTRUCT development documentation generators...${NC}"
        
        local generators_dir="$CONSTRUCT_CORE/patterns/plugins/tooling/construct-dev/generators"
        
        # Run script reference generator
        if [ -f "$generators_dir/script-reference.sh" ]; then
            echo -e "${GREEN}‚Üí Generating script reference${NC}"
            bash "$generators_dir/script-reference.sh" "$PROJECT_DIR" > "$DOCS_DIR/script-reference-automated.md"
        fi
        
        # Run development patterns generator
        if [ -f "$generators_dir/development-patterns.sh" ]; then
            echo -e "${GREEN}‚Üí Generating development patterns${NC}"
            bash "$generators_dir/development-patterns.sh" "$PROJECT_DIR" > "$DOCS_DIR/development-patterns-automated.md"
        fi
        
        # Run API reference generator
        if [ -f "$generators_dir/api-reference.sh" ]; then
            echo -e "${GREEN}‚Üí Generating API reference${NC}"
            bash "$generators_dir/api-reference.sh" "$PROJECT_DIR" > "$DOCS_DIR/api-reference-automated.md"
        fi
        
        # Run improving guide generator
        if [ -f "$generators_dir/improving-guide.sh" ]; then
            echo -e "${GREEN}‚Üí Generating improving CONSTRUCT guide${NC}"
            bash "$generators_dir/improving-guide.sh" "$PROJECT_DIR" > "$DOCS_DIR/improving-CONSTRUCT-guide-automated.md"
        fi
        
        echo -e "${GREEN}‚úÖ CONSTRUCT development documentation generated${NC}"
    fi
}

# Run main function
main "$@"