#!/bin/bash

# CONSTRUCT Development Pattern - Script Reference Generator
# Generates comprehensive script reference documentation

set -e

PROJECT_DIR="${1:-.}"

# Detect CONSTRUCT scripts location
if [ -d "$PROJECT_DIR/CONSTRUCT-CORE/CONSTRUCT/scripts" ]; then
    # This is the CONSTRUCT repository itself
    CONSTRUCT_DIR="$PROJECT_DIR/CONSTRUCT-CORE/CONSTRUCT"
elif [ -d "$PROJECT_DIR/CONSTRUCT/scripts" ]; then
    # This is a project using CONSTRUCT
    CONSTRUCT_DIR="$PROJECT_DIR/CONSTRUCT"
else
    echo "Not a CONSTRUCT project (no CONSTRUCT/scripts directory found)"
    exit 1
fi

cat << 'EOF'
## Script Reference

This reference documents all available scripts in the CONSTRUCT system.

### Core Development Scripts

EOF

# Document each script in CONSTRUCT/scripts/
find "$CONSTRUCT_DIR/scripts" -name "*.sh" -type f 2>/dev/null | sort | while read -r script; do
    script_name=$(basename "$script")
    script_path=${script#$PROJECT_DIR/}
    echo "#### $script_name"
    echo ""
    echo "**Path**: \`$script_path\`"
    echo ""
    
    # Extract description from script header
    description=$(head -10 "$script" | grep "^# .*[A-Za-z]" | grep -v "^#!/" | head -1 | sed 's/^# //')
    if [ -n "$description" ]; then
        echo "**Purpose**: $description"
    fi
    
    # Check if script has usage/help
    if grep -q "usage\|Usage\|--help" "$script"; then
        echo "**Usage**: Run with \`--help\` for detailed usage information"
    fi
    
    echo ""
done

cat << 'EOF'

### Library Functions

EOF

# Document library functions
if [ -d "$CONSTRUCT_DIR/lib" ]; then
    find "$CONSTRUCT_DIR/lib" -name "*.sh" -type f 2>/dev/null | sort | while read -r lib_file; do
        lib_name=$(basename "$lib_file")
        echo "#### $lib_name"
        echo ""
        
        # Extract description
        description=$(head -10 "$lib_file" | grep "^# .*[A-Za-z]" | grep -v "^#!/" | head -1 | sed 's/^# //')
        if [ -n "$description" ]; then
            echo "**Purpose**: $description"
        fi
        
        # List functions
        functions=$(grep "^[a-zA-Z_][a-zA-Z0-9_]*()" "$lib_file" 2>/dev/null | cut -d'(' -f1)
        if [ -n "$functions" ]; then
            echo "**Functions**:"
            echo "$functions" | while read -r func; do
                echo "- \`$func()\`"
            done
        fi
        
        echo ""
    done
fi

cat << 'EOF'

### Configuration Files

EOF

# Document configuration files
if [ -d "$CONSTRUCT_DIR/config" ]; then
    find "$CONSTRUCT_DIR/config" -name "*.yaml" -type f 2>/dev/null | sort | while read -r config_file; do
        config_name=$(basename "$config_file")
        echo "#### $config_name"
        echo ""
        
        # Extract description from config file
        description=$(head -10 "$config_file" | grep "^# .*[A-Za-z]" | head -1 | sed 's/^# //')
        if [ -n "$description" ]; then
            echo "**Purpose**: $description"
        fi
        
        # List top-level sections
        sections=$(grep "^[a-zA-Z_][a-zA-Z0-9_]*:" "$config_file" 2>/dev/null | cut -d':' -f1)
        if [ -n "$sections" ]; then
            echo "**Sections**:"
            echo "$sections" | while read -r section; do
                echo "- \`$section\`"
            done
        fi
        
        echo ""
    done
fi

echo "---"
echo ""
echo "*Generated by CONSTRUCT pattern system*"